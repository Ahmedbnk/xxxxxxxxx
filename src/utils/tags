!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nkasimi/minishell/src/utils/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
add_back_file_name	lst_file_name_func.c	/^void	add_back_file_name(t_name_lst **lst, t_name_lst *new)$/;"	f	typeref:typename:void
are_they_equal	are_they_equal.c	/^int	are_they_equal(const char *str1, const char *str2)$/;"	f	typeref:typename:int
creat_line	get_next_line.c	/^static char	*creat_line(char **rest)$/;"	f	typeref:typename:char *	file:
creat_rest	get_next_line.c	/^static char	*creat_rest(int fd, char *rest)$/;"	f	typeref:typename:char *	file:
custom_join	custom_join.c	/^char	*custom_join(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
fill_n_str	ft_itoa.c	/^static void	fill_n_str(char *str, int n)$/;"	f	typeref:typename:void	file:
format_specifier	print_error.c	/^void	format_specifier(va_list arguements, char specifier, int *counter)$/;"	f	typeref:typename:void
free_memory	garbage_collector.c	/^void	free_memory(t_list **list_pointer)$/;"	f	typeref:typename:void
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstnew	ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	ft_lstsize.c	/^int ft_lstsize(t_list *list)$/;"	f	typeref:typename:int
ft_malloc	garbage_collector.c	/^void	*ft_malloc(size_t size, int falg)$/;"	f	typeref:typename:void *
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_putchar	print_error.c	/^void	ft_putchar(char c, int *counter)$/;"	f	typeref:typename:void
ft_putstr	print_error.c	/^void	ft_putstr(char *str, int *counter)$/;"	f	typeref:typename:void
ft_putstr_fd	ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_split	ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strcpy	custom_join.c	/^void ft_strcpy(char *dst, const char *src)$/;"	f	typeref:typename:void
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *s, int flag)$/;"	f	typeref:typename:char *
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_w_counter	ft_split.c	/^static int	ft_w_counter(char const *s, char c)$/;"	f	typeref:typename:int	file:
garbage_collection_lstnew	garbage_collection_lstnew.c	/^t_list	*garbage_collection_lstnew(void *content, int flag)$/;"	f	typeref:typename:t_list *
generate_random_name	generate_random_name.c	/^char	*generate_random_name(void)$/;"	f	typeref:typename:char *
generate_random_number	generate_random_name.c	/^int	generate_random_number(void)$/;"	f	typeref:typename:int
get_garbage_pointer	garbage_collector.c	/^t_list	**get_garbage_pointer(int flag)$/;"	f	typeref:typename:t_list **
get_next_line	get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
handle_failure_and_eof	get_next_line.c	/^static char	*handle_failure_and_eof(char *rest, ssize_t readed_bytes)$/;"	f	typeref:typename:char *	file:
is_all_spaces	is_all_spaces.c	/^int is_all_spaces(const char *str)$/;"	f	typeref:typename:int
is_dollar	is_dollar.c	/^int is_dollar(char c)$/;"	f	typeref:typename:int
is_protected	is_protected.c	/^int is_protected(t_shell_control_block *sh, char *str, int index)$/;"	f	typeref:typename:int
is_quote	is_quote.c	/^int is_quote(char c)$/;"	f	typeref:typename:int
is_redirection	is_redirection.c	/^int	is_redirection(char *str)$/;"	f	typeref:typename:int
is_space	is_space.c	/^int	is_space(char c)$/;"	f	typeref:typename:int
is_there_a_pipe	it_there_a_pipe.c	/^int is_there_a_pipe(t_shell_control_block *shell)$/;"	f	typeref:typename:int
len_of_two_d_array	len_of_two_d_array.c	/^int len_of_two_d_array(char **str)$/;"	f	typeref:typename:int
n_counter	ft_itoa.c	/^static int	n_counter(int n)$/;"	f	typeref:typename:int	file:
new_file_name	lst_file_name_func.c	/^t_name_lst	*new_file_name(void *name_of_file, int status)$/;"	f	typeref:typename:t_name_lst *
print_error	print_error.c	/^int	print_error(const char *str, ...)$/;"	f	typeref:typename:int
print_file	print_file.c	/^void print_file(char *str)$/;"	f	typeref:typename:void
print_splitted	print_splitted.c	/^void print_splitted(char **splitted)$/;"	f	typeref:typename:void
read_file	read_file.c	/^char *read_file(char *file_name)$/;"	f	typeref:typename:char *
