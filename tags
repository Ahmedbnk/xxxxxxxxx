!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/abenkrar/Desktop/minishell/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): $(OBJS)$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
%.o	libft/Makefile	/^%.o: %.c$/;"	t
BUFFER_SIZE	include/minishell.h	/^#define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = cc$/;"	m
CC	libft/Makefile	/^CC = cc $/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g -Iinclude $/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
HEREDOC	include/minishell.h	/^	HEREDOC,      \/\/ << 5$/;"	e	enum:e_token_type
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
MINISHELL_H	include/minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME = minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
PIPE	include/minishell.h	/^	PIPE,         \/\/ | 1$/;"	e	enum:e_token_type
READLINE	Makefile	/^READLINE =-lreadline$/;"	m
REDIR_APPEND	include/minishell.h	/^	REDIR_APPEND, \/\/ >> 4$/;"	e	enum:e_token_type
REDIR_IN	include/minishell.h	/^	REDIR_IN,     \/\/ < 2$/;"	e	enum:e_token_type
REDIR_OUT	include/minishell.h	/^	REDIR_OUT,    \/\/ > 3$/;"	e	enum:e_token_type
SIZE	src/built_in/pwd.c	/^#define  SIZE /;"	d	file:
SRCS	Makefile	/^SRCS = main.c \\$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_isalpha.c \\$/;"	m
WORD	include/minishell.h	/^	WORD,         \/\/  0 for regular words$/;"	e	enum:e_token_type
add_var_to_env	src/built_in/export.c	/^static char **add_var_to_env(char **env , char *var)$/;"	f	typeref:typename:char **	file:
after_dollar	include/minishell.h	/^	char			*after_dollar;$/;"	m	struct:s_expand	typeref:typename:char *
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
allocat_and_init	src/env/allocate_and_init_expand_list.c	/^void	allocat_and_init(t_expand **expand_list, int how_much_to_expand, int heredoc_flag)$/;"	f	typeref:typename:void
allocat_expand_list	src/env/allocate_and_init_expand_list.c	/^static void	allocat_expand_list(t_expand **expand_list, int how_much_to_expand)$/;"	f	typeref:typename:void	file:
are_they_equal	src/utils/are_they_equal.c	/^int	are_they_equal(const char *str1, const char *str2)$/;"	f	typeref:typename:int
befor_dollar	include/minishell.h	/^	char			*befor_dollar;$/;"	m	struct:s_expand	typeref:typename:char *
calculate_all_symboles_operators	src/parser/split_with_operators.c	/^static int	calculate_all_symboles_operators(char **splitted)$/;"	f	typeref:typename:int	file:
cd	src/built_in/cd.c	/^void cd(char **env, char **path)$/;"	f	typeref:typename:void
check_after_geting_bath	src/execution/execute_command.c	/^void  check_after_geting_bath( char *cmd, char **av, char **path, char **env)$/;"	f	typeref:typename:void
check_error	src/parser/check_input_error.c	/^int	check_error(char *str)$/;"	f	typeref:typename:int
check_syntax_error	src/parser/make_token.c	/^int check_syntax_error(t_data *data, int len)$/;"	f	typeref:typename:int
check_the_access	src/execution/execute_command.c	/^void  check_the_access(char *cmd, char **av, char **env)$/;"	f	typeref:typename:void
check_unclosed_quotes	src/parser/check_input_error.c	/^int	check_unclosed_quotes(char *str)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
cmd_and_args	include/minishell.h	/^  char **cmd_and_args;$/;"	m	struct:s_shell_control_block	typeref:typename:char **
compare_env_var	src/built_in/ist_valid_env_var.c	/^int compare_env_var(char *var1, char *var2)$/;"	f	typeref:typename:int
content	include/minishell.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
copy_env	src/env/copy_env.c	/^char ** copy_env(char **env)$/;"	f	typeref:typename:char **
creat_line	src/utils/get_next_line.c	/^static char	*creat_line(char **rest)$/;"	f	typeref:typename:char *	file:
creat_rest	src/utils/get_next_line.c	/^static char	*creat_rest(int fd, char *rest)$/;"	f	typeref:typename:char *	file:
create_all_heredocs	src/parser/handle_heredoc.c	/^void create_all_heredocs(t_data *tokenized)$/;"	f	typeref:typename:void
create_heredoc	src/parser/handle_heredoc.c	/^void create_heredoc(t_data *tokenized)$/;"	f	typeref:typename:void
custom_join	src/utils/custom_join.c	/^char	*custom_join(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
customized_split	src/parser/customized_split.c	/^char	**customized_split(char const *s)$/;"	f	typeref:typename:char **
delimiter	include/minishell.h	/^  char      *delimiter;$/;"	m	struct:s_data	typeref:typename:char *
does_string_has_operators	src/parser/split_with_operators.c	/^static int	does_string_has_operators(char *str)$/;"	f	typeref:typename:int	file:
double_q	include/minishell.h	/^# define double_q /;"	d
e_token_type	include/minishell.h	/^typedef enum e_token_type$/;"	g
echo	src/built_in/echo.c	/^void echo(char **args)$/;"	f	typeref:typename:void
env_cpy	include/minishell.h	/^  char **env_cpy;$/;"	m	struct:s_shell_control_block	typeref:typename:char **
execute_built_in	src/built_in/check_built_in_command.c	/^int  execute_built_in(t_shell_control_block *shell)$/;"	f	typeref:typename:int
execute_command	src/execution/execute_command.c	/^void execute_command(t_shell_control_block *shell)$/;"	f	typeref:typename:void
execute_command_line	src/parser/execute_command_line.c	/^void execute_command_line(t_shell_control_block *shell)$/;"	f	typeref:typename:void
execute_line	main.c	/^void execute_line(t_shell_control_block *shell)$/;"	f	typeref:typename:void
expand_if_possible	src/expansion/expand_if_possible.c	/^char	*expand_if_possible(char *str , int heredoc_flag)$/;"	f	typeref:typename:char *
expand_input	main.c	/^void expand_input(char **input) {$/;"	f	typeref:typename:void
expnad_and_join_node	src/expansion/new_string_after_expand.c	/^char	*expnad_and_join_node(t_expand data)$/;"	f	typeref:typename:char *
export	src/built_in/export.c	/^void export(char ***env, char **to_export)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
fill_n_str	libft/ft_itoa.c	/^static void	fill_n_str(char *str, int n)$/;"	f	typeref:typename:void	file:
fill_n_str	src/utils/ft_itoa.c	/^static void	fill_n_str(char *str, int n)$/;"	f	typeref:typename:void	file:
fill_the_list	src/parser/make_token.c	/^void fill_the_list(t_data * list, char **arr)$/;"	f	typeref:typename:void
find_and_update_var	src/built_in/export.c	/^static int find_and_update_var(char **env, char *var)$/;"	f	typeref:typename:int	file:
format_specifier	src/utils/print_error.c	/^void	format_specifier(va_list arguements, char specifier, int *counter)$/;"	f	typeref:typename:void
free_memory	src/utils/garbage_collector.c	/^void	free_memory(t_list **list_pointer)$/;"	f	typeref:typename:void
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_init_shell_block	main.c	/^void ft_init_shell_block(t_shell_control_block *shell, int ac, char **av)$/;"	f	typeref:typename:void
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalnum	src/utils/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isalpha	src/built_in/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isdigit	src/built_in/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_itoa	src/utils/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	src/utils/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	src/utils/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_malloc	src/utils/garbage_collector.c	/^void	*ft_malloc(size_t size, int falg)$/;"	f	typeref:typename:void *
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	src/utils/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_putchar	src/utils/print_error.c	/^void	ft_putchar(char c, int *counter)$/;"	f	typeref:typename:void
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr	src/utils/print_error.c	/^void	ft_putstr(char *str, int *counter)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	src/utils/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_readline	main.c	/^char *ft_readline(t_shell_control_block *shell) {$/;"	f	typeref:typename:char *
ft_split	src/utils/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strchr	src/utils/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strcmp	src/built_in/ft_strcmp.c	/^int	ft_strcmp(char *s1, char *s2)$/;"	f	typeref:typename:int
ft_strcpy	src/utils/custom_join.c	/^void ft_strcpy(char *dst, const char *src)$/;"	f	typeref:typename:void
ft_strdup	src/utils/ft_strdup.c	/^char	*ft_strdup(const char *s, int flag)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	src/utils/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	src/utils/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(const char *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *big, const char *little, size_t n)$/;"	f	typeref:typename:int
ft_strncmp	src/built_in/ft_strncmp.c	/^int	ft_strncmp(const char *big, const char *little, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *find, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(const char *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	src/utils/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_w_counter	src/parser/customized_split.c	/^static int	ft_w_counter(char const *s)$/;"	f	typeref:typename:int	file:
ft_w_counter	src/utils/ft_split.c	/^static int	ft_w_counter(char const *s, char c)$/;"	f	typeref:typename:int	file:
garbage_collection_lstnew	src/utils/garbage_collection_lstnew.c	/^t_list	*garbage_collection_lstnew(void *content, int flag)$/;"	f	typeref:typename:t_list *
generate_random_name	src/parser/execute_command_line.c	/^char	*generate_random_name(void)$/;"	f	typeref:typename:char *
generate_random_number	src/parser/execute_command_line.c	/^int	generate_random_number(void)$/;"	f	typeref:typename:int
get_cmd_and_its_args	src/execution/execute_command.c	/^char **get_cmd_and_its_args(t_shell_control_block *shell)$/;"	f	typeref:typename:char **
get_garbage_pointer	src/utils/garbage_collector.c	/^t_list	**get_garbage_pointer(int flag)$/;"	f	typeref:typename:t_list **
get_next_line	src/utils/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_path	src/execution/execute_command.c	/^char **get_path()$/;"	f	typeref:typename:char **
get_token_type	src/parser/make_token.c	/^t_token	get_token_type(const char *str)$/;"	f	typeref:typename:t_token
handle_append	src/parser/handle_append.c	/^void handle_append(char *str, char **file_name)$/;"	f	typeref:typename:void
handle_dollar_with_quotes	src/parser/handle_dollar_with_quotes.c	/^char **handle_dollar_with_quotes(char **splitted)$/;"	f	typeref:typename:char **
handle_failure_and_eof	src/utils/get_next_line.c	/^static char	*handle_failure_and_eof(char *rest, ssize_t readed_bytes)$/;"	f	typeref:typename:char *	file:
handle_redir_in	src/parser/handle_redir_in.c	/^void handle_redir_in(char *str, char **in_file_name)$/;"	f	typeref:typename:void
handle_redir_out	src/parser/handle_redir_out.c	/^void handle_redir_out(char *str, char **file_name)$/;"	f	typeref:typename:void
handle_signals	src/signals/handle_signals.c	/^void	handle_signals(void)$/;"	f	typeref:typename:void
handle_signals_in_child	src/signals/handle_signals.c	/^void	handle_signals_in_child(void)$/;"	f	typeref:typename:void
heredoc_file_name	include/minishell.h	/^  char      *heredoc_file_name;$/;"	m	struct:s_data	typeref:typename:char *
heredoc_flag	include/minishell.h	/^	int				heredoc_flag;$/;"	m	struct:s_expand	typeref:typename:int
how_many_dallar_to_expand	src/expansion/expand_if_possible.c	/^int	how_many_dallar_to_expand(char *str, int heredoc_flag)$/;"	f	typeref:typename:int
how_many_strcut_in_the_array	src/execution/execute_command.c	/^int how_many_strcut_in_the_array(t_data *arr_of_stracts)$/;"	f	typeref:typename:int
init_expand_list	src/env/allocate_and_init_expand_list.c	/^static void	init_expand_list(t_expand *expand_list, int how_much_to_expand, int heredoc_flag)$/;"	f	typeref:typename:void	file:
is_between_quotes	src/parser/is_between_quotes.c	/^int	is_between_quotes(char *line, int index)$/;"	f	typeref:typename:int
is_expand_separator	src/expansion/is_expand_separator.c	/^int	is_expand_separator(char c)$/;"	f	typeref:typename:int
is_expend_seperator	src/expansion/is_expand_separator_fix.c	/^int	is_expend_seperator(char c)$/;"	f	typeref:typename:int
is_it_key_value	src/built_in/ist_valid_env_var.c	/^int is_it_key_value(char *str)$/;"	f	typeref:typename:int
is_operator	src/parser/split_with_operators.c	/^static int	is_operator(char *str, int i)$/;"	f	typeref:typename:int	file:
is_space	src/utils/is_space.c	/^int	is_space(char c)$/;"	f	typeref:typename:int
is_the_var_in_env	src/built_in/unset.c	/^int is_the_var_in_env(char **env, char *var)$/;"	f	typeref:typename:int
is_there_a_pipe	main.c	/^int is_there_a_pipe(t_shell_control_block *shell)$/;"	f	typeref:typename:int
is_valid_var	src/built_in/ist_valid_env_var.c	/^int is_valid_var(char *str)$/;"	f	typeref:typename:int
last_one	include/minishell.h	/^	int				last_one;$/;"	m	struct:s_expand	typeref:typename:int
len_of_two_d_array	src/utils/len_of_two_d_array.c	/^int len_of_two_d_array(char **str)$/;"	f	typeref:typename:int
line	include/minishell.h	/^  char *line;$/;"	m	struct:s_shell_control_block	typeref:typename:char *
main	main.c	/^int main(int ac, char **av, char **env)$/;"	f	typeref:typename:int
main	test.c	/^int main()$/;"	f	typeref:typename:int
make_token	src/parser/make_token.c	/^t_data *make_token(char **arr)$/;"	f	typeref:typename:t_data *
n_counter	libft/ft_itoa.c	/^static int	n_counter(int n)$/;"	f	typeref:typename:int	file:
n_counter	src/utils/ft_itoa.c	/^static int	n_counter(int n)$/;"	f	typeref:typename:int	file:
new_str_after_expand	src/expansion/new_string_after_expand.c	/^char	*new_str_after_expand(t_expand *data, int num_of_expantion)$/;"	f	typeref:typename:char *
next	include/minishell.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
parse_line	main.c	/^void parse_line(t_shell_control_block *shell)$/;"	f	typeref:typename:void
print_command	src/parser/execute_command_line.c	/^void	print_command(t_data *tokenized)$/;"	f	typeref:typename:void
print_env	src/built_in/env.c	/^void print_env(char **env)$/;"	f	typeref:typename:void
print_error	src/utils/print_error.c	/^int	print_error(const char *str, ...)$/;"	f	typeref:typename:int
print_file	src/utils/print_file.c	/^void print_file(char *str)$/;"	f	typeref:typename:void
print_splitted	src/utils/print_splitted.c	/^void print_splitted(char **splitted)$/;"	f	typeref:typename:void
process_command	src/parser/execute_command_line.c	/^void	process_command(t_data *tokenized, t_shell_control_block *shell)$/;"	f	typeref:typename:void
pwd	src/built_in/pwd.c	/^char *pwd()$/;"	f	typeref:typename:char *
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
read_file	src/parser/read_file.c	/^char *read_file(char *file_name)$/;"	f	typeref:typename:char *
read_file	src/utils/read_file.c	/^char *read_file(char *file_name)$/;"	f	typeref:typename:char *
remake_delimeter	src/parser/handle_heredoc.c	/^char *remake_delimeter(char *str)$/;"	f	typeref:typename:char *
remove_dollar_if_quotes_after_it	src/parser/handle_dollar_with_quotes.c	/^char *remove_dollar_if_quotes_after_it(char *str)$/;"	f	typeref:typename:char *
remove_quotes	src/parser/remove_quotes_from_args.c	/^void	remove_quotes(char **line)$/;"	f	typeref:typename:void
remove_quotes_from_args	src/parser/remove_quotes_from_args.c	/^void remove_quotes_from_args(char **splitted)$/;"	f	typeref:typename:void
remove_quotes_helper	src/parser/remove_quotes_from_args.c	/^static void	remove_quotes_helper(char *line, char **parsed_quote_line)$/;"	f	typeref:typename:void	file:
remove_var_from_env	src/built_in/unset.c	/^void remove_var_from_env(char ***env , char *var)$/;"	f	typeref:typename:void
s_data	include/minishell.h	/^typedef struct s_data$/;"	s
s_expand	include/minishell.h	/^typedef struct s_expand$/;"	s
s_list	include/minishell.h	/^typedef struct s_list$/;"	s
s_shell_control_block	include/minishell.h	/^typedef struct s_shell_control_block$/;"	s
should_i_expand	src/expansion/should_i_expand.c	/^int	should_i_expand(char *str, int index)$/;"	f	typeref:typename:int
sigint_handler	src/signals/handle_signals.c	/^void	sigint_handler(int signo)$/;"	f	typeref:typename:void
sigint_handler_in_child	src/signals/handle_signals.c	/^void	sigint_handler_in_child(int signo)$/;"	f	typeref:typename:void
single_q	include/minishell.h	/^# define single_q /;"	d
skip_command	src/parser/execute_command_line.c	/^void	skip_command(t_data **tokenized_address)$/;"	f	typeref:typename:void
sort_env	src/built_in/export.c	/^ static void sort_env(char **env)$/;"	f	typeref:typename:void	file:
split_helper	src/parser/customized_split.c	/^static void	split_helper(char **splitted, char *s, int i, int k)$/;"	f	typeref:typename:void	file:
split_string_with_operators	src/parser/split_with_operators.c	/^static void	split_string_with_operators(char **container, char *str, int *j_ptr)$/;"	f	typeref:typename:void	file:
split_with_operators	src/parser/split_with_operators.c	/^char	**split_with_operators(char **splitted)$/;"	f	typeref:typename:char **
splitted	include/minishell.h	/^  char **splitted;$/;"	m	struct:s_shell_control_block	typeref:typename:char **
string_after_dollar	src/expansion/expand_if_possible.c	/^void	string_after_dollar(t_expand *data, int index, char *str, int *offset)$/;"	f	typeref:typename:void
string_before_dollar	src/expansion/expand_if_possible.c	/^void	string_before_dollar(t_expand *data, int index, char *str, int *offset)$/;"	f	typeref:typename:void
string_to_expand	src/expansion/expand_if_possible.c	/^void	string_to_expand(t_expand *data, int index, char *str, int *offset)$/;"	f	typeref:typename:void
t_data	include/minishell.h	/^}					t_data;$/;"	t	typeref:struct:s_data
t_expand	include/minishell.h	/^}					t_expand;$/;"	t	typeref:struct:s_expand
t_list	include/minishell.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_shell_control_block	include/minishell.h	/^}t_shell_control_block;$/;"	t	typeref:struct:s_shell_control_block
t_token	include/minishell.h	/^}					t_token;$/;"	t	typeref:enum:e_token_type
to_expand	include/minishell.h	/^	char			*to_expand;$/;"	m	struct:s_expand	typeref:typename:char *
tokenized	include/minishell.h	/^  t_data *tokenized;$/;"	m	struct:s_shell_control_block	typeref:typename:t_data *
type	include/minishell.h	/^	int				type;$/;"	m	struct:s_data	typeref:typename:int
unset	src/built_in/unset.c	/^void unset(char ***env, char **vars)$/;"	f	typeref:typename:void
update_env_dir	src/built_in/cd.c	/^void update_env_dir(char **env, char *old_dir, char *new_dir)$/;"	f	typeref:typename:void
word	include/minishell.h	/^	char			*word;$/;"	m	struct:s_data	typeref:typename:char *
